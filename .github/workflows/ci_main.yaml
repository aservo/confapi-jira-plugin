name: CI Main

on:
  push:
    branches:
      - 'main'

jobs:
  package:

    runs-on: ubuntu-20.04

    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: confapi-plugin-${{ hashFiles('**/pom.xml') }}
        restore-keys: confapi-plugin

    - name: Download Dependencies
      run: ./mvnw dependency:go-offline -U -B

    - name: Build with Maven
      run: ./mvnw package -DskipTests=true -B

  unit-tests:
    needs: package

    runs-on: ubuntu-20.04

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Cache Maven package
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: confapi-plugin-${{ hashFiles('**/pom.xml') }}
        restore-keys: confapi-plugin

    - name: Run Unit Tests
      run: ./mvnw --batch-mode compile test

    - name: Perform static code analysis
      run: |
        ./mvnw --batch-mode sonar:sonar \
           --settings ./.github/workflows/settings.xml \
           -P resolving,analyzing,defaults

  integration-tests:
    needs: package

    runs-on: ubuntu-20.04

    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Cache Maven package
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: confapi-plugin-${{ hashFiles('**/pom.xml') }}
        restore-keys: confapi-plugin

    - name: Run Integration Tests
      run: ./mvnw integration-test -B

  deploy:
    needs: [unit-tests, integration-tests]

    runs-on: ubuntu-20.04

    env:
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      GPG_KEY_BASE64: ${{ secrets.GPG_KEY_BASE64 }}
      GPG_KEY_NAME: ${{ secrets.GPG_KEY_NAME }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Cache Maven package
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: confapi-plugin-${{ hashFiles('**/pom.xml') }}
        restore-keys: confapi-plugin

    - name: Import GPG key
      run: echo "${GPG_KEY_BASE64}" | base64 --decode | gpg --no-tty --batch --import

    - name: Publish
      run: |
          ./mvnw --batch-mode deploy \
            --settings ./.github/workflows/settings.xml \
            -P resolving,signing,deploying,defaults \
            -DskipTests=true

  apcc:
    needs: deploy

    runs-on: ubuntu-20.04

    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Cache Maven package
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: confapi-plugin-${{ hashFiles('**/pom.xml') }}
        restore-keys: confapi-plugin

    - name: Download APCC
      run: ./mvnw dependency:get -DgroupId=de.aservo -DartifactId=atlassian-plugin-compatibility-check -Dversion=0.0.2

    - name: Copy APCC to current Directory
      run: ./mvnw dependency:copy -Dartifact=de.aservo:atlassian-plugin-compatibility-check:0.0.2 -DoutputDirectory=.

    - name: Run APCC
      run: java -jar atlassian-plugin-compatibility-check-0.0.2.jar "jira.version"
